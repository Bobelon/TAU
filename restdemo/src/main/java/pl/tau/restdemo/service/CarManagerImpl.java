package pl.tau.restdemo.service;

import org.springframework.stereotype.Component;
import pl.tau.restdemo.domain.Car;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by tp on 24.04.17.
 */
@Component
public class CarManagerImpl implements CarManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/testdb";

	private PreparedStatement addCarStmt;
	private PreparedStatement deleteCarStmt;
	private PreparedStatement getAllCarsStmt;
	private PreparedStatement getCarStmt;
	private PreparedStatement updateCarStmt;

	private Statement statement;

	public CarManagerImpl() throws SQLException {
		connection = DriverManager.getConnection(url);
		statement = connection.createStatement();

		ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		while (rs.next()) {
			if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			}
		}

		if (!tableExists)
			statement.executeUpdate("CREATE TABLE Car(id bigint GENERATED BY DEFAULT AS IDENTITY, "
					+ "name varchar(40), year integer)");

		addCarStmt = connection.prepareStatement("INSERT INTO Car (id, name, year) VALUES (?, ?, ?)");
		deleteCarStmt = connection.prepareStatement("DELETE FROM Car where id = ?");
		updateCarStmt = connection.prepareStatement("UPDATE Car SET name = ?, year = ? WHERE id = ?");
		getAllCarsStmt = connection.prepareStatement("SELECT id, name, year FROM Car");
		getCarStmt = connection.prepareStatement("SELECT id, name, year FROM Car WHERE id=?");

	}

	@Override
	public Connection getConnection() {
		return connection;
	}

	@Override
	public void deleteCar(Car car) throws SQLException {
		deleteCarStmt.setLong(1, car.getId());
		deleteCarStmt.executeUpdate();
	}

	@Override
	public void clearCar() throws SQLException {
		connection.prepareStatement("delete from Car").executeUpdate();
	}

	@Override
	public int addCar(Car car) {
		int count = 0;
		try {
			addCarStmt.setLong(1, car.getId());
			addCarStmt.setString(2, car.getName());
			addCarStmt.setInt(3, car.getYear());

			count = addCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public void updateCar(Car car) {
		try {
			updateCarStmt.setString(1, car.getName());
			updateCarStmt.setInt(2, car.getYear());
			updateCarStmt.setLong(3, car.getId());
			updateCarStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Car getCar(Car car) {
		Car findedCar = new Car();

		try {
			getCarStmt.setLong(1, car.getId());
			ResultSet rs = getCarStmt.executeQuery();
			rs.next();

			findedCar.setId(rs.getInt("id"));
			findedCar.setName(rs.getString("name"));
			findedCar.setYear(rs.getInt("year"));

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return findedCar;
	}

	public List<Car> getAllCars() {
		List<Car> cars = new ArrayList<Car>();

		try {
			ResultSet rs = getAllCarsStmt.executeQuery();

			while (rs.next()) {
				Car p = new Car();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYear(rs.getInt("year"));
				cars.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cars;
	}
}
